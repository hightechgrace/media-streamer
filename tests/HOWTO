*****************************************
*  HOWTO run those tests with fun       *
*     (avoiding to die within the try)  *
*                                       *
*                              By Txor  *
*****************************************


(1) mmforwarder - Forwards one video and one audio streams (from 5004/5006 to 6004/6006).

    1- (optional if already done) Generate a suitable video file coded with h264 and pcm_mulaw:
        ffmpeg -i any_media_file.any -map 0:0 -map 0:1 -vcodec libx264 -c:a pcm_mulaw -ac 1 your_media_file.avi

    2- (optional if already done) Generate an SDP file with this command and save it (say media.sdp), remember to change the ports to 6004 and 6006:
        ffmpeg -re -i your_media_file.avi -map 0:0 -vcodec copy -f rtp rtp://127.0.0.1:5004 -map 0:1 -acodec copy -f rtp rtp://127.0.0.1:5006
        media.sdp example:
            v=0
            o=- 0 0 IN IP4 127.0.0.1
            s=No Name
            t=0 0
            a=tool:libavformat 55.19.104
            m=video 6004 RTP/AVP 96
            c=IN IP4 127.0.0.1
            a=rtpmap:96 H264/90000
            a=fmtp:96 packetization-mode=1;
            m=audio 6006 RTP/AVP 97
            c=IN IP4 127.0.0.1
            b=AS:384
            a=rtpmap:97 PCMU/48000/1

    3- Start the media receiver with our SDP file:
        ffplay media.sdp

    4- Run the test program:
        bin/mmforwarder

    5- Start the media transmitter with our media file (codec flags may vary):
        ffmpeg -re -i your_media_file.avi -map 0:0 -vcodec copy -f rtp rtp://127.0.0.1:5004 -map 0:1 -acodec copy -f rtp rtp://127.0.0.1:5006


(2) video_receiver - Write to two files the 200 first frames from two different video streams (5004).

    1- Run the test program:
        bin/video_receiver

    2- Launch first video stream (codec flags may vary):
        ffmpeg -re -i one_video_file.any -map 0:0 -vcodec libx264 -f rtp rtp://127.0.0.1:5004

    3- Launch second video stream (codec flags may vary):
        ffmpeg -re -i other_video_file.any -map 0:0 -vcodec libx264 -f rtp rtp://127.0.0.1:5004

    4- You should be able to play the videos with those commands:
        ffplay -s 1280x544 -pix_fmt rgb24 rx_frame1.yuv
        ffplay -s 1280x544 -pix_fmt rgb24 rx_frame2.yuv


(3) video_transmitter - Read a video file from disk and send it to port 6004.
    
    1- Start a video receiver:
        ffplay video.sdp
        example video.sdp:
            v=0
            o=- 0 0 IN IP4 127.0.0.1
            s=No Name
            t=0 0
            a=tool:libavformat 55.19.104
            m=video 6004 RTP/AVP 96
            c=IN IP4 127.0.0.1
            a=rtpmap:96 H264/90000
            a=fmtp:96 packetization-mode=1;

    2- Run the test program (you can generate a 1280x544, rgb24, RAW video file or use the one generated by video_receiver):
        bin/video_transmitter rx_frame1.yuv


(4) video_rec_trans - Forwards a video strem (5004).
    
    1- Run the test program:
        bin/video_rec_trans

    2- Launch a video stream:
        ffmpeg -re -i a_video_file.any -map 0:0 -vcodec copy -f rtp rtp://127.0.0.1:5004

    3- Start the video receiver with the RTSP server URL that is showed by the test program once the video stream is detected (tricky to get due to the message escaping upwards while appearing text on stderr).
        example command:
        ffplay rtsp://192.168.10.191:8554/i2cat_rocks

(5) audio_receiver - Receives two streams (5006) and saves 10 seconds of each in two different files.
    
    1- Run the test program:
        bin/audio_receiver

    2- Launch first audio stream:
        ffmpeg -re -i any_audio_file.any -ar 32000 -ac 1 -f rtp rtp://127.0.0.1:5006

    3- Launch second audio stream:
        ffmpeg -re -i any_audio_file.any -ar 8000 -ac 1 -f rtp rtp://127.0.0.1:5006


(6) audio_transmitter - Reads audio from a file and transmits it to two ports (5006 and 6006).

    1- (optional if already done) Copy a mono PCM at 2 BPS and 48000Hz audio data to a file called audio_transmitter.raw (audacity is a good choice to do so) on the path you'll run the test program.

    2- Start ffplay:
        ffplay -nodisp audio.sdp
        audio.sdp example (use either port 5006 or 6006):
            v=0
            o=- 0 0 IN IP4 127.0.0.1
            s=No Name
            c=IN IP4 127.0.0.1
            t=0 0
            a=tool:libavformat 55.19.104
            m=audio 6006 RTP/AVP 97
            b=AS:256
            a=rtpmap:97 PCMU/32000/1
    
    3- Run the test program:
        bin/audio_transmitter


(7) audio_rec_trans - Juggles two incoming audio streams (5006) to two outcoming audio streams (6006 and 7006), read the explanation on the sources for more details.

    1- (optional if already done) Generate two SDP files for receive mono uLaw at 32000Hz in 6006 and 7006 port each.

    2- Start first audio transmitter to port 5006:
        ffmpeg -re -i one_audio_file.any -ar 16000 -ac 1 -f rtp rtp://127.0.0.1:5006
    
    3- Start second audio transmitter to port 5006:
        ffmpeg -re -i other_audio_file.any -ar 16000 -ac 1 -f rtp rtp://127.0.0.1:5006

    4- Start one or two (earache option) audio receivers with SDPs from point 1. 
        ffplay -nodisp audio.sdp
    
    5- Run the test program (you hear the first stream):
        bin/audio_transmitter

    6- Run announced command (you hear each stream every 5 seconds):
        kill -10 his_pid

